<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shoebid.www.repository.ProductDAO">
<sql id="search">
 
<if test="type != null">
			<trim prefix="and (" suffix=")" prefixOverrides="OR">
				<foreach collection="typeToArray" item="type">
					<trim prefix="OR">
						<choose>
							<when test="type == 's'.toString()">
								category = 'sneakers' and pname like concat('%', #{kw}, '%')
								or description like concat('%', #{kw}, '%')
							</when>
							<when test="type == 'a'.toString()">
							category = 'sandals' and pname like concat('%', #{kw}, '%')
								or description like concat('%', #{kw}, '%')
							</when>
							<when test="type == 'i'.toString()">
							category = 'slippers' and pname like concat('%', #{kw}, '%')
								or description like concat('%', #{kw}, '%')
							</when>
							<when test="type == 'l'.toString()">
								category = 'loafers' and pname like concat('%', #{kw}, '%')
								or description like concat('%', #{kw}, '%')
							</when>
							<when test="type == 'f'.toString()">
								category = 'flat' and pname like concat('%', #{kw}, '%')
								or description like concat('%', #{kw}, '%')
							</when>
							<when test="type == 'b'.toString()">
							category = 'boots' and pname like concat('%', #{kw}, '%')
								or description like concat('%', #{kw}, '%')
							</when>
						</choose>
					</trim>
				</foreach>
			</trim>
		</if> 
	</sql>
	<insert id="insert" parameterType="pvo">
		insert into product
		(category,
		pname, description, writer, product_img,
		reserve_price, end_time)
		values
		(#{category}, #{pname}, #{description}, #{writer},
		#{productImg}, #{reservePrice}, #{endTime})
	</insert>
	<select id="selectList" resultType="pvo" parameterType="pgvo">
		select a.pno, category ,pname ,
		description , read_count ,writer ,product_img ,
		status, reserve_price,
		(select max(bid_price)
		from buy_bid b
		where a.pno = b.pno
		) "highest_price",
		end_time, mod_at
		from (
		select pno from product where pno > 0 and status = 0
		<include refid="search" />
		order by pno desc
		limit #{pageStart}, #{qty}
		) a left join product b
		on a.pno = b.pno
	</select>
	<select id="selectDetail" parameterType="long" resultType="pvo">
		select * from product
		where pno = #{pno}
	</select>
	<select id="selectNickName" parameterType="long"
		resultType="string">
		select m.nick_name
		from product p left join `member`m
		on
		p.writer = m.mno
		where p.pno= #{pno}
	</select>
	<select id="selectMaxPrice" parameterType="long"
		resultType="int">
		select ifnull(max(b.bid_price),0)
		from product p left join buy_bid b
		on p.pno = b.pno
		where b.pno = #{pno};
	</select>
	<select id="selectTotalCount" resultType="int" parameterType="pgvo">
	select count(pno)
	from product
	where pno > 0
	 <include refid="search" />
	</select>
	<select id="selectLastPno" resultType="long">
	select max(pno) from product
	</select>
	<update id="update" parameterType="pvo">
		update product set category =
		#{category},
		pname = #{pname}, description =#{description},
		product_img
		= #{productImg}, reserve_price = #{reservePrice},
		end_time = #{endTime}
		where pno = #{pno}
	</update>
	<update id="updateHighestPrice">
		update product set highest_price
		#{highestPrice}
		where
		pno = #{pno}
	</update>
	<update id="updateReadCount">
		update product set read_count = read_count + #{i}
		where pno = #{pno}
	</update>
	<update id="updateStatus" parameterType="pvo">
		update product set status = #{status},
		highest_price = #{highestPrice}
		where pno = #{pno}
	</update>
	<delete id="delete" parameterType="long">
		delete from product
		where pno =
		#{pno}
	</delete>
</mapper>