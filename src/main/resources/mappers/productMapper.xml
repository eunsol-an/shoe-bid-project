<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shoebid.www.repository.ProductDAO">
	<sql id="search">
		<choose>
			<when test="type != null">
				<trim prefix="and (" suffix=")" prefixOverrides="OR">
					<foreach collection="typeToArray" item="type">
						<trim prefix="OR">
							<choose>
								<when test="type == 's'.toString()">
									category = 'sneakers'
									<if test="kw != null">
									 and (pname like concat('%', #{kw}, '%')
									or description like concat('%', #{kw}, '%'))
									</if>
								</when>
								<when test="type == 'a'.toString()">
									category = 'sandals'
									<if test="kw != null">
									 and (pname like concat('%', #{kw}, '%')
									or description like concat('%', #{kw}, '%'))
									</if>
								</when>
								<when test="type == 'i'.toString()">
									category = 'slippers'
									<if test="kw != null">
									 and (pname like concat('%', #{kw}, '%')
									or description like concat('%', #{kw}, '%'))
									</if>
								</when>
								<when test="type == 'l'.toString()">
									category = 'loafers' 
									<if test="kw != null">
									 and (pname like concat('%', #{kw}, '%')
									or description like concat('%', #{kw}, '%'))
									</if>
								</when>
								<when test="type == 'f'.toString()">
									category = 'flat' 
									<if test="kw != null">
									 and (pname like concat('%', #{kw}, '%')
									or description like concat('%', #{kw}, '%'))
									</if>
								</when>
								<when test="type == 'b'.toString()">
									category = 'boots'
									<if test="kw != null">
									 and (pname like concat('%', #{kw}, '%')
									or description like concat('%', #{kw}, '%'))
									</if>
								</when>
								<when test="kw != null">
										(pname like concat('%', #{kw}, '%')
									or description like concat('%', #{kw}, '%'))
								</when>
							</choose>
						</trim>
					</foreach>
				</trim>
			</when>
			
		</choose>
	</sql>
	<sql id="sellSearch">
		<choose>
			<when test="pgvo.type != null">
				<trim prefix="and (" suffix=")" prefixOverrides="OR">
					<foreach collection="pgvo.typeToArray" item="type">
						<trim prefix="OR">
							<choose>
								<when test="type == 'p'.toString()">
									status = 0
								</when>
								<when test="type == 's'.toString()">
									status = 1
								</when>
								<when test="type == 'f'.toString()">
									status = 2
								</when>
							</choose>
						</trim>
					</foreach>
				</trim>
			</when>
		</choose>
	</sql>
	<sql id="order">
		<choose>
			<when test="orderBy != null">
				<if test="orderBy == 'end'.toString()">
					order by end_time
				</if>
				<if test="orderBy == 'reg'.toString()">
					order by mod_at desc
				</if>
				<if test="orderBy == 'reserveDown'.toString()">
					order by reserve_price
				</if>
				<if test="orderBy == 'reserveUp'.toString()">
					order by reserve_price desc
				</if>
				<if test="orderBy == 'highestDown'.toString()">
					order by highest_price
				</if>
				<if test="orderBy == 'highestUp'.toString()">
					order by highest_price desc
				</if>
				<if test="orderBy == ''">
					order by mod_at desc
				</if>
			</when>
			<otherwise>
				order by mod_at desc
			</otherwise>
		</choose>
	</sql>
	<insert id="insert" parameterType="pvo">
		insert into product
		(category,
		pname, description, writer, product_img,
		reserve_price, end_time)
		values
		(#{category}, #{pname}, #{description}, #{writer},
		#{productImg}, #{reservePrice}, #{endTime})
	</insert>
	<select id="selectList" resultType="pvo" parameterType="ppgvo">
		select a.pno, category ,pname ,
		description , read_count ,writer
		,product_img ,
		status, reserve_price, a.highest_price,
		end_time, mod_at
		from (
		select pno,
		ifnull((select max(bid_price)
		from buy_bid b
		where
		b.pno = p.pno
		),0) "highest_price"
		from product p where pno > 0 and status = 0
		<include refid="search" />
		<include refid="order" />
		limit #{pageStart}, #{qty}
		) a left join product b
		on a.pno = b.pno;
	</select>
	<select id="selectDetail" parameterType="long" resultType="pvo">
		select * from product
		where pno = #{pno}
	</select>
	<select id="selectNickName" parameterType="long"
		resultType="mvo">
		select m.nick_name, m.member_img
		from product p left join
		`member`m
		on
		p.writer = m.mno
		where p.pno= #{pno}
	</select>
	<select id="selectMaxPrice" parameterType="long"
		resultType="int">
		select ifnull(max(b.bid_price),0)
		from product p left join
		buy_bid b
		on p.pno = b.pno
		where b.pno = #{pno};
	</select>
	<select id="selectTotalCount" resultType="int"
		parameterType="ppgvo">
		select count(pno)
		from product
		where pno > 0 and status = 0
		<include refid="search" />
	</select>
	<select id="selectSellTotalCount" resultType="int">
		select count(pno)
		from product
		where pno > 0 and writer = #{mno}
		<include refid="sellSearch" />
	</select>
	<select id="selectLastPno" resultType="long">
		select max(pno) from product
	</select>
	<select id="selectAllList" resultType="pvo">
		select a.pno, category ,pname ,
		description , read_count ,writer ,product_img,
		status, reserve_price,
		ifnull(
		(select max(bid_price)
		from buy_bid b
		where a.pno = b.pno
		),0) "highest_price",
		end_time, mod_at
		from product a
		where status = 0
	</select>
	<select id="selectSallList" resultType="pvo">
		select p.pno, category ,pname , description , read_count
		,p.writer ,product_img , status, reserve_price,
		(select max(bid_price)
		from buy_bid b
		where p.pno = b.pno
		) "highest_price",
		end_time, mod_at, b.buyer buyer_mno, m.nick_name buyer_nick
		from product p
		left join buy_bid b on (p.highest_price = b.bid_price and p.pno = b.pno)
		left join `member` m
		on (m.mno = b.buyer)
		where writer = #{mno}
		<include refid="sellSearch" />
		order by mod_at desc
		limit #{pgvo.pageStart}, #{pgvo.qty}

	</select>
	<update id="update" parameterType="pvo">
		update product set category =
		#{category},
		pname = #{pname}, description =#{description},
		product_img
		= #{productImg}, reserve_price = #{reservePrice},
		end_time = #{endTime}
		where pno = #{pno}
	</update>
	<update id="updateHighestPrice">
		update product set highest_price
		#{highestPrice}
		where
		pno = #{pno}
	</update>
	<update id="updateReadCount">
		update product set read_count = read_count + #{i}
		where pno = #{pno}
	</update>
	<update id="updateStatus" parameterType="pvo">
		update product set
		status = #{status},
		highest_price = #{highestPrice}
		where pno = #{pno}
	</update>
	<delete id="delete" parameterType="long">
		delete from product
		where pno =
		#{pno}
	</delete>
</mapper>